{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "dataPings": [
            "[]"
        ],
        "designer|userClassName": "Tasks",
        "idService": 0,
        "indexPing": 0,
        "stores": [
            "Tasks",
            "Priorities",
            "PingStore"
        ]
    },
    "configAlternates": {
        "dataPings": "array",
        "idService": "number",
        "indexPing": "number"
    },
    "designerId": "2856dba3-c512-4b02-8986-a3e844ab0885",
    "customConfigs": [
        {
            "group": "(Custom Properties)",
            "name": "dataPings",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "idService",
            "type": "string"
        },
        {
            "group": "(Custom Properties)",
            "name": "indexPing",
            "type": "string"
        }
    ],
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#gridPanel",
                "designer|params": [
                    "target",
                    "record"
                ],
                "fn": "view",
                "implHandler": [
                    "var me = this;",
                    "console.log('Editing');",
                    "var details = this.getDetailsPanel(),\t// Get detail panel via controller ref",
                    "    toolbar = this.getDetailsToolbar();\t// Get detail panel toolbar via controller ref",
                    "",
                    "",
                    "var dataService = {",
                    "    id: record.data.id,",
                    "    url: record.data.url,",
                    "    method: record.data.method",
                    "};",
                    "this.dataPings = [{pings : []}];",
                    "this.idService = record.data.id;",
                    "this.indexPing = 0;",
                    "",
                    "Ext.Ajax.request({",
                    "    url: 'http://10.50.24.132:3000/request',",
                    "    params: dataService,",
                    "    method: 'post',",
                    "    //timeout: 5000,",
                    "    success: function(response) {",
                    "//         console.log('response');",
                    "",
                    "        test = response;",
                    "        if(response.responseText){",
                    "            response.responseText = JSON.parse(response.responseText);",
                    "            if(response.responseText.response)",
                    "                response.responseText.response = JSON.parse(response.responseText.response);",
                    "        }",
                    "",
                    "",
                    "        var formatedJson = me.syntaxHighlight(response.responseText);",
                    "",
                    "        details.update({'response':formatedJson});",
                    "        //details.labelJson.update(formatedJson);",
                    "",
                    "    },",
                    "    failure: function(response){",
                    "",
                    "//         console.log(response.responseText);",
                    "        var formatedJson = me.syntaxHighlight(response.responseText);",
                    "        details.update({response:formatedJson});",
                    "    }",
                    "});",
                    "",
                    "var me = this;",
                    "var pingStore = me.getPingStoreStore();",
                    "pingStore.removeAll();",
                    "",
                    "var chart = Ext.getCmp('chartStatus');",
                    "chart.doAutoRender();",
                    "",
                    "// this.tunningServiceStore(store,url, true, objparams);",
                    "// var proxy =  {",
                    "//                 type: 'ajax',",
                    "//                 url : 'http://10.50.24.160:3000/pings',",
                    "//                 reader: {",
                    "//                     type: 'json'",
                    "//                 }",
                    "//             };",
                    "",
                    "//mon instead on",
                    "// pingStore.on('beforeload', function(store, operation) {",
                    "// //     store.setProxy(proxy);",
                    "//     store.getProxy().setExtraParam(\"id\",record.data.id);",
                    "// //    console.log('+1');",
                    "",
                    "// });",
                    "if(this.idService)",
                    "this.loadPings(this.idService,0,'Y');",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "// Show toolbar",
                    "//toolbar.show();",
                    ""
                ],
                "name": "select",
                "scope": "me"
            },
            "designerId": "df446b75-e4d7-445e-89e4-61f7a5aefeae"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#mainPanel #addButton",
                "designer|params": [
                    "target"
                ],
                "fn": "add",
                "implHandler": [
                    "\r",
                    "var formWindow = Ext.create('widget.taskform'),\t// Create new form window\r",
                    "\tform = formWindow.down('form').getForm(),\t// Get form within window\r",
                    "    model = Ext.create('model.task');\t\t// Create new Task model\r",
                    "\r",
                    "// Associate model with form\r",
                    "form.loadRecord(model);\r",
                    "\r",
                    "// Show window\r",
                    "formWindow.show();\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "e36d723b-3313-48ef-ac07-dece1e00f055"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#detailsPanel #editButton",
                "designer|params": [
                    "target"
                ],
                "fn": "edit",
                "implHandler": [
                    "\r",
                    "var data = target.up('panel').data,\t\t\t\t\t\t// Get panel's assosiated data\r",
                    "\tstore = this.getTasksStore(),\t\t\t\t\t\t// Get Tasks store\r",
                    "\ttask = store.getById(data.id),\t\t\t\t\t\t// Get current task\r",
                    "    formWindow = Ext.create('widget.taskform'),\t\t\t// Create new form window\r",
                    "\tform = formWindow.down('form').getForm();\t\t\t// Get form within window\r",
                    "\r",
                    "// Load task model into form\r",
                    "form.loadRecord(task);\r",
                    "\r",
                    "// Show window\r",
                    "formWindow.show();\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "6c1bbf38-d9cb-47ea-9ac3-355220170579"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#recordForm #saveButton",
                "designer|params": [
                    "target"
                ],
                "fn": "save",
                "implHandler": [
                    "\r",
                    "var form = target.up('form').getForm(),\t\t\t// Get parent form\r",
                    "\tformWindow = target.up('window'),\t\t\t// Get parent window\r",
                    "\tdetailsPanel = this.getDetailsPanel(),\t\t// Get details panel\r",
                    "\tdetailsToolbar = this.getDetailsToolbar(),\t// Get detail panel toolbar\r",
                    "\ttask = form.getRecord(),\t\t\t\t\t// Get task associated with form\r",
                    "\tstore = this.getTasksStore(),\t\t\t\t// Get Records store\r",
                    "\tisNew = !task.get('id');\t\t\t\t\t// Is new if no task ID exists\r",
                    "\r",
                    "\r",
                    "// Update associated task with form values\r",
                    "var errors = form.updateRecord();\r",
                    "\r",
                    "// Valid\r",
                    "if (form.isValid()) {\r",
                    "\r",
                    "    // Add to store if new task\r",
                    "    if (isNew) {\r",
                    "\r",
                    "        // Assign the task ID\r",
                    "        // Normally, this would be a generated ID\r",
                    "        var id = store.getTotalCount() + 1;\r",
                    "        task.set(\"id\", id);\r",
                    "\r",
                    "        // Add to store\r",
                    "        store.add(task);\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    // Commit changes\r",
                    "    store.commitChanges();\r",
                    "\r",
                    "    // Update detail panel\r",
                    "    detailsPanel.update(task.getData());\r",
                    "\r",
                    "    // Close window\r",
                    "    formWindow.destroy();\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "// Invalid\r",
                    "else {\r",
                    "\r",
                    "    // Show errors on form\r",
                    "    form.markInvalid(errors);\r",
                    "\r",
                    "}\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "f27cbf84-7243-4479-90a4-df42d4f775ab"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#recordForm #cancelButton",
                "designer|params": [
                    "target"
                ],
                "fn": "cancelEdit",
                "implHandler": [
                    "\r",
                    "// Get the window and close it\r",
                    "var formWindow = target.up(\"window\");\r",
                    "\tformWindow.destroy();\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "d0c4a0b7-dfc7-4587-919c-a603c5f4a4ff"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#detailsPanel #removeButton",
                "designer|params": [
                    "target"
                ],
                "fn": "remove",
                "implHandler": [
                    "\r",
                    "var me = this;\r",
                    "\r",
                    "// Confirm this delete\r",
                    "Ext.Msg.confirm('Confirm', 'Are you sure you want to delete this task?', function(btn) {\r",
                    "\r",
                    "    // User confirmed yes\r",
                    "    if (btn == 'yes') {\r",
                    "\r",
                    "        var data = target.up('panel').data,\t\t\t\t// Get assosiated data\r",
                    "            store = me.getTasksStore(),\t\t\t\t\t// Get tasks store\r",
                    "            task = store.getById(data.id),\t\t\t\t// Get current task\r",
                    "            detailsPanel = me.getDetailsPanel(),\t\t// Get details panel\r",
                    "            detailsToolbar = me.getDetailsToolbar();\t// Get details panel toolbar\r",
                    "\r",
                    "        // Delete from store\r",
                    "        store.remove(task);\r",
                    "\r",
                    "        // Clear panel content\r",
                    "        detailsPanel.update(null);\r",
                    "\r",
                    "        // Hide toolbar\r",
                    "        detailsToolbar.hide();\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "});\r",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "designerId": "b98ca3bb-f3ae-4325-bb62-345e81cd9b07"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "detailsPanel",
                "selector": "#detailsPanel"
            },
            "designerId": "d5fcba7c-366a-4285-baa8-1ad5e532d2d0"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "detailsToolbar",
                "selector": "#detailsPanel #detailsToolbar",
                "xtype": null
            },
            "designerId": "fc4ec857-1bbe-40eb-800c-d002cae9f090"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "var me = this;",
                    "",
                    "var taskStore = me.getTasksStore();",
                    "var task = taskStore.data.items;",
                    "",
                    "Ext.Date.fuzzy = function(time, local){",
                    "",
                    "\tlocal = (!local) && (local = Date.now());",
                    "",
                    "\tif (typeof time !== 'number' || typeof local !== 'number') {",
                    "\t\treturn;",
                    "\t}",
                    "",
                    "\tvar",
                    "\t\toffset = Math.abs((local - time)/1000),",
                    "\t\tspan   = [],",
                    "\t\tMINUTE = 60,",
                    "\t\tHOUR   = 3600,",
                    "\t\tDAY    = 86400,",
                    "\t\tWEEK   = 604800,",
                    "\t\tMONTH  = 2629744,",
                    "\t\tYEAR   = 31556926;",
                    "\t\tDECADE = 315569260;",
                    "",
                    "\tif (offset <= MINUTE)              span = [ '', 'moments' ];",
                    "\telse if (offset < (MINUTE * 60))   span = [ Math.round(Math.abs(offset / MINUTE)), 'min' ];",
                    "\telse if (offset < (HOUR * 24))     span = [ Math.round(Math.abs(offset / HOUR)), 'hr' ];",
                    "\telse if (offset < (DAY * 7))       span = [ Math.round(Math.abs(offset / DAY)), 'day' ];",
                    "\telse if (offset < (WEEK * 52))     span = [ Math.round(Math.abs(offset / WEEK)), 'week' ];",
                    "\telse if (offset < (YEAR * 10))     span = [ Math.round(Math.abs(offset / YEAR)), 'year' ];",
                    "\telse if (offset < (DECADE * 100))  span = [ Math.round(Math.abs(offset / DECADE)), 'decade' ];",
                    "\telse                               span = [ '', 'a long time' ];",
                    "",
                    "\tspan[1] += (span[0] === 0 || span[0] > 1) ? 's' : '';",
                    "\tspan = span.join(' ');",
                    "",
                    "\treturn (time <= local)  ? span + ' ago' : 'in ' + span;",
                    "};",
                    "",
                    "var registerService = 0;",
                    "test = task;",
                    "",
                    "me.dataPings = [{pings : []}];",
                    "setInterval(function() {",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: 'http://10.50.24.132:3000/elements',",
                    "        method: 'get',",
                    "        success: function(response) {",
                    "",
                    "            var resp = JSON.parse(response.responseText);",
                    "            taskStore.loadRawData(resp);",
                    "",
                    "            resp.forEach(function(value,index){",
                    "               var record = taskStore.findRecord('id',value.id);",
                    "                if(value.last_status===0){",
                    "                    record.set('icon','success.png');",
                    "                    record.set('state', Ext.Date.fuzzy(new Date(value.last_status_change).getTime()));",
                    "                }else{",
                    "                    record.set('icon','fail.png');",
                    "                    record.set('state', Ext.Date.fuzzy(new Date(value.last_status_change).getTime()));",
                    "                }",
                    "                record.set('response',me.syntaxHighlight(resp.response));",
                    "                record.set('result',resp.result);",
                    "            });",
                    "",
                    "            me.filterByGroupName(taskStore);",
                    "        },",
                    "        failure: function(response){",
                    "            record.set('state','fail');",
                    "            record.set('icon','fail.png');",
                    "            record.set('response', '');",
                    "            record.set('result','timeOut');",
                    "        }",
                    "    });",
                    "   if(me.idService)",
                    "    me.loadPings(me.idService,1);",
                    "",
                    "}, 20000);",
                    "",
                    "    Ext.Ajax.request({",
                    "        url: 'http://10.50.24.132:3000/elements',",
                    "        method: 'get',",
                    "        success: function(response) {",
                    "",
                    "            var resp = JSON.parse(response.responseText);",
                    "            taskStore.loadRawData(resp);",
                    "",
                    "            resp.forEach(function(value,index){",
                    "               var record = taskStore.findRecord('id',value.id);",
                    "                if(value.last_status===0){",
                    "                    record.set('icon','success.png');",
                    "                    record.set('state', Ext.Date.fuzzy(new Date(value.last_status_change).getTime()));",
                    "                }else{",
                    "                    record.set('icon','fail.png');",
                    "                    record.set('state', Ext.Date.fuzzy(new Date(value.last_status_change).getTime()));",
                    "                }",
                    "                record.set('response',me.syntaxHighlight(resp.response));",
                    "                record.set('result',resp.result);",
                    "            });",
                    "",
                    "            me.filterByGroupName(taskStore);",
                    "        },",
                    "        failure: function(response){",
                    "            record.set('state','fail');",
                    "            record.set('icon','fail.png');",
                    "            record.set('response', '');",
                    "            record.set('result','timeOut');",
                    "        }",
                    "    });"
                ]
            },
            "designerId": "a77b66b0-23df-4590-b312-19147475f3a0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "o"
                ],
                "fn": "clone",
                "implHandler": [
                    "var me = this;\r",
                    "if(!o || 'object' !== typeof o) {\r",
                    "    return o;\r",
                    "}\r",
                    "var c = 'function' === typeof o.pop ? [] : {};\r",
                    "var p, v;\r",
                    "for(p in o) {\r",
                    "    if(o.hasOwnProperty(p)) {\r",
                    "        v = o[p];\r",
                    "        if(v && 'object' === typeof v) {\r",
                    "            c[p] = me.clone(v);\r",
                    "        }\r",
                    "        else {\r",
                    "            c[p] = v;\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "return c;"
                ]
            },
            "designerId": "b0bd33c9-2ac0-4406-a36b-ab2a213e2025"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "service",
                    "target"
                ],
                "fn": "sendRequest",
                "implHandler": [
                    "var me = this;",
                    "",
                    "var dataService = {",
                    "    id: service.data.id,",
                    "    url: service.data.url,",
                    "    method: service.data.method",
                    "};",
                    "var taskStore = me.getTasksStore();",
                    "var record = taskStore.findRecord('id',dataService.id);",
                    "record.set('icon','loader.gif');",
                    "",
                    "//console.log('data',dataService);",
                    "Ext.Ajax.request({",
                    "//    url: 'http://10.50.24.160:3000/request',",
                    "    url: 'http://10.50.24.132:3000/request',",
                    "    params: dataService,",
                    "    method: 'post',",
                    "    //timeout: 5000,",
                    "    success: function(response) {",
                    "        //console.log('id',service.data.id);",
                    "        var resp = JSON.parse(response.responseText);",
                    "        //console.log(resp);",
                    "        if(resp.successfull){",
                    "            record.set('state','success');",
                    "            record.set('icon','success.png');",
                    "        }else{",
                    "            record.set('state','fail');",
                    "            record.set('icon','fail.png');",
                    "        }",
                    "        record.set('response',me.syntaxHighlight(resp.response));",
                    "        record.set('result',resp.result);",
                    "    },",
                    "    failure: function(response){",
                    "        //console.log('id',service.data.id);",
                    "        record.set('state','fail');",
                    "        record.set('icon','fail.png');",
                    "        console.log(arguments);",
                    "        record.set('response', '');",
                    "        record.set('result','timeOut');",
                    "    }",
                    "});"
                ]
            },
            "designerId": "6650dba4-b39c-410e-a4b0-47819c58021c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "json"
                ],
                "fn": "syntaxHighlight",
                "implHandler": [
                    "if (typeof json == 'string') {",
                    "    //console.log(json);",
                    "    try{",
                    "        json = JSON.parse(json);",
                    "    }catch(e){",
                    "        return json;",
                    "    }",
                    "",
                    "}",
                    "json = JSON.stringify(json, null, 2);",
                    "return json;"
                ]
            },
            "designerId": "2635d5c9-5091-4be7-92df-1d4d0c8fcd16"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "idService",
                    "scopeIn",
                    "lastHour"
                ],
                "fn": "loadPings",
                "implHandler": [
                    "var me = this;",
                    "var chart = Ext.getCmp('chartStatus');",
                    "var lastHour = (lastHour)? '&lastHour=' + lastHour:'';",
                    "Ext.Ajax.request({",
                    "    method : 'GET',",
                    "    url : 'http://10.50.24.132:3000/pings?id=' + idService + lastHour,",
                    "    success : function(response){",
                    "        var data = Ext.JSON.decode(response.responseText);",
                    "        var idx = 0;",
                    "        var objService = me.dataPings[idx];",
                    "        var markerIndex = chart.markerIndex || 0;",
                    "        var timeAxis = chart.axes.get(1);",
                    "        var series = chart.series.get(0);",
                    "        series.markerConfig.fill = (data[0].status === 0)?'#14A525':'#f00';",
                    "        if(scopeIn === 0){",
                    "            me.dataPings[idx].pings = (data);",
                    "            var dateCurrent = new Date(data[0].ping_date);",
                    "            timeAxis.fromDate = dateCurrent;",
                    "            timeAxis.toDate = Ext.Date.add(dateCurrent, Ext.Date.HOUR, 1);",
                    "        }else{",
                    "            if(me.dataPings[idx].pings[me.dataPings[idx].pings.length-1].id!==data[0].id)",
                    "            me.dataPings[idx].pings.push(data[0]);",
                    "        }",
                    "        if(Ext.Date.format(timeAxis.toDate, 'Y-m-d H:i:s') < data[0].ping_date){",
                    "            markerIndex = 1;",
                    "            timeAxis.toDate = new Date(data[0].ping_date);",
                    "            timeAxis.fromDate = new Date(objService.pings[me.indexPing].ping_date);",
                    "            me.indexPing ++;",
                    "            chart.markerIndex = markerIndex;",
                    "        }",
                    "",
                    "        var pingStore = me.getPingStoreStore();",
                    "",
                    "        pingStore.loadData(objService.pings);",
                    "    }",
                    "});"
                ]
            },
            "designerId": "a36fb1c5-e06e-4d49-a8ea-1148a4c62c8e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "idService"
                ],
                "fn": "searchServiceInPings",
                "implHandler": [
                    "var ix = 0;\r",
                    "Ext.Array.each(this.dataPings, function(obj){\r",
                    "    if(obj.id == idService){\r",
                    "        return false;\r",
                    "    }\r",
                    "    ix++;\r",
                    "});\r",
                    "\r",
                    "return ix;"
                ]
            },
            "designerId": "8c45c889-6259-4c64-bc91-bfd146d09f63"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#cboGroup",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onCboGroupSelect",
                "implHandler": [
                    "var taskStore = this.getTasksStore();\r",
                    "this.filterByGroupName(taskStore);"
                ],
                "name": "select",
                "scope": "me"
            },
            "designerId": "065d5ab7-ef27-4190-95b7-01f580ba21f5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#cboGroup",
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onCboGroupChange",
                "implHandler": [
                    "var taskStore = this.getTasksStore();\r",
                    "var combo = Ext.ComponentQuery.query('#cboGroup')[0];\r",
                    "if(combo.value !== null && combo.value.length === 0){\r",
                    "    taskStore.clearFilter();\r",
                    "    combo.setValue('Filter by Group');\r",
                    "}"
                ],
                "name": "change",
                "scope": "me"
            },
            "designerId": "4d0b5fad-d5be-4edf-9912-c23f19ac995e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "taskStore"
                ],
                "fn": "filterByGroupName",
                "implHandler": [
                    "var comboValues = Ext.ComponentQuery.query('#cboGroup')[0].value; // Getting combo values from comboGroup\r",
                    "\r",
                    "if(comboValues!== null && comboValues.length > 0 && comboValues[0]!=='Filter by Group'){\r",
                    "    taskStore.clearFilter();\r",
                    "    taskStore.filterBy(function (record) {\r",
                    "        var result = false;\r",
                    "        result = Ext.Array.contains(comboValues,record.data.group); // Verifying if exits group within selected values from ComboBox\r",
                    "        if(result){\r",
                    "            return record;\r",
                    "        }\r",
                    "    });\r",
                    "}"
                ]
            },
            "designerId": "77da4875-c1f0-40d3-8793-d5497fe13a7b"
        }
    ]
}